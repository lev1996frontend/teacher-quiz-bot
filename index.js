// –¢–µ–ª–µ–≥—Ä–∞–º-–±–æ—Ç: —à—É—Ç–æ—á–Ω–∞—è –≤–∏–∫—Ç–æ—Ä–∏–Ω–∞ –¥–ª—è —É—á–∏—Ç–µ–ª—è —Ä—É—Å—Å–∫–æ–≥–æ/–ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã.
// –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏:
// - –í—Å–µ —à—É—Ç–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã –±–µ–∑ –ø–æ–¥—Å—á—ë—Ç–∞ –±–∞–ª–ª–æ–≤ (–ª—é–±–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –æ–∫).
// - –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ—Ç–∞ (–ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –ø–æ CAT_NAME).
// - –ú–µ–Ω—é –∏ –∫–æ–º–∞–Ω–¥—ã: /start, /menu, /restart.
// - –í –∫–æ–Ω—Ü–µ –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–≤–∞ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–∞: —Ñ–æ—Ç–æ (–∏–∑ ./assets) –∏ PDF (–≥–µ–Ω–µ—Ä–∞—Ü–∏—è pdfkit).

const { Telegraf, Markup, session } = require("telegraf");
const fs = require("fs");
const path = require("path");
const PDFDocument = require("pdfkit");
require("dotenv").config();

const BOT_TOKEN = process.env.BOT_TOKEN;
const TEACHER_NAME = process.env.TEACHER_NAME || "–ù–∞—à –ª—é–±–∏–º—ã–π —É—á–∏—Ç–µ–ª—å";
const CAT_NAME = process.env.CAT_NAME || "–ú—É—Ä–∑–∏–∫";

if (!BOT_TOKEN) {
  console.error("–ù–µ –∑–∞–¥–∞–Ω BOT_TOKEN –≤ .env");
  process.exit(1);
}

const bot = new Telegraf(BOT_TOKEN);

// –ù–∞–¥—ë–∂–Ω–∞—è —Å–µ—Å—Å–∏—è
bot.use(
  session({
    getSessionKey: (ctx) => {
      const fromId = ctx.from?.id;
      const chatId = ctx.chat?.id;
      if (fromId && chatId) return `${fromId}:${chatId}`;
      if (fromId) return String(fromId);
      return undefined;
    },
    defaultSession: () => ({
      step: 0,
      quiz: null,
      currentOptions: null,
      correctIndex: null, // -1 => all-correct
      lock: false,
    }),
  })
);

// –ö–æ–º–∞–Ω–¥—ã –≤ –º–µ–Ω—é Telegram
bot.telegram.setMyCommands([
  { command: "start", description: "–ù–∞—á–∞—Ç—å" },
  { command: "menu", description: "–ú–µ–Ω—é" },
  { command: "restart", description: "–ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –≤–∏–∫—Ç–æ—Ä–∏–Ω—É" },
]);

// ===== –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –≤–æ–ø—Ä–æ—Å—ã =====
const subject = "—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞";

const TOASTS = [
  "–£—á–∏—Ç–µ–ª—å ‚Äî —Å–µ—Ä–¥—Ü–µ –∫–ª–∞—Å—Å–∞!\n–°–ª–æ–≤–æ ‚Äî –∏—Å–∫—Ä–∞, –≤–∑–≥–ª—è–¥ ‚Äî –∫–æ–º–ø–∞—Å.\n–ü—É—Å—Ç—å –≥–æ—Ä–∏—Ç –∏ –≥—Ä–µ–µ—Ç!",
  "–í—ã ‚Äî –∫ –¥–æ—Å–∫–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π!\n–ó–≤—ë–∑–¥—ã ‚Äî –∫–∞–∫ –∑–∞–ø—è—Ç—ã–µ,\n—Å—Ç–∞–≤–∏—Ç–µ ‚Äî –∏ —Å–≤–µ—Ç–ª–µ–µ.",
  "–ì–æ–ª–æ—Å ‚Äî –º–µ–ª, –¥—ã—Ö–∞–Ω–∏–µ ‚Äî —Å—Ç—Ä–æ–∫–∞.\n–£—á–∏—Ç–µ–ª—å, –≤—ã ‚Äî —É–¥–∞—Ä–µ–Ω–∏–µ –Ω–∞ —Å–º—ã—Å–ª–µ!\n–ü—É—Å—Ç—å –Ω–µ –∫–æ–Ω—á–∞–µ—Ç—Å—è –≤–¥–æ—Ö.",
  "–ï—Å–ª–∏ –¥–µ—Ç–µ–π –∑–∞–∂–∏–≥–∞—é—Ç ‚Äî –∑–Ω–∞—á–∏—Ç, —ç—Ç–æ –Ω—É–∂–Ω–æ!\n–í—ã ‚Äî —Å–ø–∏—á–∫–∞ –º—ã—Å–ª–µ–π.\n–ü—É—Å—Ç—å –æ–≥–æ–Ω—å ‚Äî –±–µ–∑–æ–ø–∞—Å–Ω–æ, —è—Ä–∫–æ, –¥—Ä—É–∂–Ω–æ.",
  "–õ–∏—Ç–µ—Ä–∞—Ç—É—Ä–∞ ‚Äî –±–∞—Ä–∞–±–∞–Ω —Å–µ—Ä–¥—Ü–∞!\n–í—ã –¥–µ—Ä–∂–∏—Ç–µ —Ä–∏—Ç–º.\n–ú—ã ‚Äî –≤ —Ç–∞–∫—Ç, –º—ã ‚Äî –≤ —Å—Ç—Ä–æ–∫—É!",
  "–°–ª–æ–≤–æ ‚Äî –º–æ—Å—Ç. –í—ã ‚Äî –∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä.\n–ú—ã ‚Äî —à–∞–≥ –∑–∞ —à–∞–≥–æ–º —á–µ—Ä–µ–∑ ¬´–≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å¬ª.\n–°–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤–µ–¥—ë—Ç–µ.",
];

// –®—É—Ç–æ—á–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: allCorrect:true -> –ª—é–±–æ–π –æ—Ç–≤–µ—Ç –∑–∞—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è
const BASE_QUESTIONS = [
  {
    q: "–ß—Ç–æ –¥–µ–ª–∞–µ—Ç —É—Ä–æ–∫ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã –ø–æ-–Ω–∞—Å—Ç–æ—è—â–µ–º—É –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–º?",
    options: [
      "–ò–Ω—Ç—Ä–∏–≥–∞ –≤ —Å—é–∂–µ—Ç–µ",
      "–£—á–∏—Ç–µ–ª—å —Å –∏—Å–∫—Ä–æ–π",
      "–£—á–µ–Ω–∏–∫ —Å –≤–æ–ø—Ä–æ—Å–æ–º ¬´–∞ –∑–∞—á–µ–º?¬ª",
      "–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞ –≤ –Ω–∞—á–∞–ª–µ",
    ],
    allCorrect: true,
  },
  {
    q: "–ö–∞–∫–æ–π —ç—Ç–æ —Ç—Ä–æ–ø: ¬´—Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫ ‚Äî –Ω–∏—Ç–∫–∞, —Å—à–∏–≤–∞—é—â–∞—è —Å–º—ã—Å–ª¬ª?",
    options: [
      "–ú–µ—Ç–∞—Ñ–æ—Ä–∞",
      "–ö—Ä–∞—Å–∏–≤–æ —Å–∫–∞–∑–∞–Ω–æ ‚Äî –∏ —Ö–≤–∞—Ç–∏—Ç",
      "–≠—Ç–æ –∫–æ–≥–¥–∞ –ø—Ä–µ–¥–º–µ—Ç—ã –¥—Ä—É–∂–∞—Ç —Å–æ —Å–º—ã—Å–ª–∞–º–∏",
      "–¢–æ—Ç —Å–∞–º—ã–π —Å–ª—É—á–∞–π, –∫–æ–≥–¥–∞ —Ö–æ—á–µ—Ç—Å—è –ø–æ–¥—á–µ—Ä–∫–Ω—É—Ç—å –≤ —Ç–µ—Ç—Ä–∞–¥–∏",
    ],
    allCorrect: true,
  },
  {
    q: "–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫ –Ω–∞ —É—Ä–æ–∫–µ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã?",
    options: [
      "–ß–∞–π ‚Äî –∫–Ω–∏–≥–∞ ‚Äî –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ",
      "–¢–µ–∑–∏—Å ‚Äî —Ü–∏—Ç–∞—Ç–∞ ‚Äî –≤—ã–≤–æ–¥",
      "–í–æ–ø—Ä–æ—Å ‚Äî —Å–ø–æ—Ä ‚Äî –ø—Ä–∏–º–∏—Ä–µ–Ω–∏–µ —Å –ü—É—à–∫–∏–Ω—ã–º",
      "–°–Ω–∞—á–∞–ª–∞ —Ç–∏—à–∏–Ω–∞, –ø–æ—Ç–æ–º —Å–º—ã—Å–ª",
    ],
    allCorrect: true,
  },
  {
    q: "–ö–∞–∫ –æ—Ç–ª–∏—á–∏—Ç—å —Ä–æ–º–∞–Ω –æ—Ç –ø–æ–≤–µ—Å—Ç–∏ –Ω–∞ –≥–ª–∞–∑?",
    options: [
      "–ü–æ —Ç–æ–ª—â–∏–Ω–µ –∫–Ω–∏–≥–∏",
      "–ü–æ —Ç–æ–ª—â–∏–Ω–µ –∑–∞–∫–ª–∞–¥–æ–∫",
      "–ü–æ —Ç–æ–ª—â–∏–Ω–µ –ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏–π",
      "–ù–∏–∫–∞–∫, –ø–æ–∫–∞ –Ω–µ –Ω–∞—á–Ω—ë—à—å —á–∏—Ç–∞—Ç—å",
    ],
    allCorrect: true,
  },
  {
    q: "–ß—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ –∑–∞–ø—è—Ç–∞—è —É–ø–ª—ã–ª–∞?",
    options: [
      "–ü–æ–∑–≤–∞—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ ‚Äî –æ–Ω–æ —Å–µ—Ä—å—ë–∑–Ω–æ–µ",
      "–ü–æ—Å—Ç–∞–≤–∏—Ç—å —Ç–∏—Ä–µ ‚Äî –æ–Ω–æ –≤—Å—ë –æ–±—ä—è—Å–Ω–∏—Ç",
      "–°–¥–µ–ª–∞—Ç—å –≤–¥–æ—Ö –∏ –ø–µ—Ä–µ—á–∏—Ç–∞—Ç—å",
      "–ù–∞–π—Ç–∏ –∑–∞–ø—è—Ç—É—é –≤ —É—á–µ–±–Ω–∏–∫–µ –∏ —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è",
    ],
    allCorrect: true,
  },
  {
    q: "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–µ—Ä–∏–∞–ª—ã ‚Äî —ç—Ç–æ‚Ä¶",
    options: [
      "–ù–æ–≤—ã–µ ¬´–í–æ–π–Ω–∞ –∏ –º–∏—Ä¬ª, —Ç–æ–ª—å–∫–æ —Å–µ—Ä–∏—è–º–∏",
      "–¢—Ä–µ–Ω–∞–∂—ë—Ä –ø–æ —Å–æ–ø–µ—Ä–µ–∂–∏–≤–∞–Ω–∏—é",
      "–ú–µ—Ç–æ–¥ –ø–æ–Ω—è—Ç—å, —á–µ–º –∂–∏–≤—ë—Ç —ç–ø–æ—Ö–∞",
      "–õ–∞–π—Ñ—Ö–∞–∫: –∫–∞–∫ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞—Ç—å –∫–ª–∞—Å—Å",
    ],
    allCorrect: true,
  },
  {
    q: "–ö–∞–∫–∞—è —Å—É–ø–µ—Ä—Å–∏–ª–∞ –Ω—É–∂–Ω–∞ —É—á–∏—Ç–µ–ª—é —Ä—É—Å—Å–∫–æ–≥–æ?",
    options: [
      "–í–∏–¥–µ—Ç—å —Å–º—ã—Å–ª –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫",
      "–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –æ—à–∏–±–∫–∏ –≤–∑–≥–ª—è–¥–æ–º",
      "–ü—Ä–µ–≤—Ä–∞—â–∞—Ç—å –ø—Ä–∞–≤–∏–ª–æ –≤ –∏—Å—Ç–æ—Ä–∏—é",
      "–°–ª—ã—à–∞—Ç—å, –≥–¥–µ —Å—Ç–∞–≤–∏—Ç—å —É–¥–∞—Ä–µ–Ω–∏–µ",
    ],
    allCorrect: true,
  },
  {
    q: "–° —á–µ–º –ª—É—á—à–µ —Å—Ä–∞–≤–Ω–∏—Ç—å –∑–∞–ø—è—Ç—É—é?",
    options: [
      "–° –ø–µ—Ä–µ–∫—Ä—ë—Å—Ç–∫–æ–º –º—ã—Å–ª–∏",
      "–° –≤–¥–æ—Ö–æ–º —á–∏—Ç–∞—Ç–µ–ª—è",
      "–° –º–∏–Ω–∏-–ø–∞—É–∑–æ–π –∞–∫—Ç—ë—Ä–∞",
      "–° –º–∞–ª–µ–Ω—å–∫–æ–π, –Ω–æ –≥–æ—Ä–¥–æ–π –¥–µ—Ç–∞–ª—å—é —Å–º—ã—Å–ª–∞",
    ],
    allCorrect: true,
  },
  {
    q: "–ö–∞–∫–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–ª —É—Ä–æ–∫–∞ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã?",
    options: [
      "–£ –≤—Å–µ—Ö –ø–æ—è–≤–∏–ª–∞—Å—å –ª—é–±–∏–º–∞—è —Ü–∏—Ç–∞—Ç–∞",
      "–ö—Ç–æ-—Ç–æ —Å–ø—Ä–æ—Å–∏–ª, —á—Ç–æ —á–∏—Ç–∞—Ç—å –¥–∞–ª—å—à–µ",
      "–¢–µ—Ç—Ä–∞–¥–∏ –∑–∞–∫—Ä—ã–ª–∏—Å—å, –∞ –º—ã—Å–ª–∏ ‚Äî –Ω–µ—Ç",
      "–£—á–∏—Ç–µ–ª—å —É–ª—ã–±–Ω—É–ª—Å—è ‚Äî –∑–Ω–∞—á–∏—Ç, –≤—ã—à–ª–æ",
    ],
    allCorrect: true,
  },
  {
    q: "–ö–∞–∫ –ø–æ–Ω—è—Ç—å, —á—Ç–æ —Å–µ—Ä–∏–∞–ª –≥–æ–¥–Ω—ã–π –¥–ª—è –ø—Ä–∏–º–µ—Ä–∞ –Ω–∞ —É—Ä–æ–∫–µ?",
    options: [
      "–ï—Å—Ç—å —Ö–∞—Ä–∞–∫—Ç–µ—Ä—ã, —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –º–æ–∂–Ω–æ —Å–ø–æ—Ä–∏—Ç—å",
      "–ï—Å—Ç—å —Ç–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—á–µ—Ç—Å—è –æ–±—Å—É–¥–∏—Ç—å",
      "–ï—Å—Ç—å —Å—Ü–µ–Ω–∞, –≥–¥–µ —è–∑—ã–∫ –∏–≥—Ä–∞–µ—Ç —Ä–æ–ª—å",
      "–ï—Å—Ç—å –ø–æ–≤–æ–¥ –≤—Å–ø–æ–º–Ω–∏—Ç—å –∫–ª–∞—Å—Å–∏–∫–æ–≤",
    ],
    allCorrect: true,
  },
];

function getToast() {
  return TOASTS[Math.floor(Math.random() * TOASTS.length)];
}

// –§–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ—Ç–∞ ‚Äî –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
function makeFinalCatQuestion() {
  const pool = ["–®–µ–Ω—è", "–õ—é–±–∏–º–∫–∞", "–ö—Ä–∞—à—É–ª–∏–∫"];
  const set = new Set(pool);
  set.add(CAT_NAME);
  let arr = Array.from(set);
  if (arr.length > 4) {
    const w = arr.filter((x) => x !== CAT_NAME);
    arr = w.slice(0, 3).concat(CAT_NAME);
  }
  return {
    q: `–ò –Ω–∞–∫–æ–Ω–µ—Ü: –∫–∞–∫ –∑–æ–≤—É—Ç –∫–æ—Ç–∞ –ê–Ω–≥–µ–ª–∏–Ω—ã?`,
    options: arr,
    correctText: CAT_NAME,
  };
}

function getQuestions() {
  return [...BASE_QUESTIONS, makeFinalCatQuestion()];
}

// ===== –£—Ç–∏–ª–∏—Ç—ã =====
function shuffle(array) {
  const a = array.slice();
  for (let i = a.length - 1; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [a[i], a[j]] = [a[j], a[i]];
  }
  return a;
}

async function showWelcome(ctx) {
  await ctx.reply(
    `–ê–Ω–≥–µ–ª–∏–Ω–∞, –í—ã –ª—é–±–∏—Ç–µ —Ä–æ–∑—ã!? –°–µ–≥–æ–¥–Ω—è ‚Äî –Ω–µ –ø—Ä–æ—Å—Ç–æ –¥–µ–Ω—å, –∞ –ø–æ–≤–æ–¥ —É—Å—Ç—Ä–æ–∏—Ç—å –ª—ë–≥–∫—É—é –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä–Ω—É—é —à–∞–ª–æ—Å—Ç—å.
–¢–µ–º–∞: ${subject}.
–í –∫–æ–Ω—Ü–µ ‚Äî –≥–ª–∞–≤–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ ... –ì–æ—Ç–æ–≤–∞?`,
    Markup.inlineKeyboard([[Markup.button.callback("–°—Ç–∞—Ä—Ç", "start")]])
  );
}

async function showMenu(ctx) {
  return ctx.reply(
    "–ú–µ–Ω—é:",
    Markup.inlineKeyboard([
      [Markup.button.callback("–ù–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", "start")],
      [Markup.button.callback("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "again")],
      [Markup.button.callback("–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", "certs")],
    ])
  );
}

async function sendQuestion(ctx) {
  const step = ctx.session.step ?? 0;
  const list = ctx.session.quiz ?? (ctx.session.quiz = getQuestions());
  const total = list.length;

  if (step >= total) return finish(ctx);

  const { q, options, correctText, allCorrect } = list[step];
  const shuffled = shuffle(options);

  ctx.session.currentOptions = shuffled;
  ctx.session.correctIndex = allCorrect ? -1 : shuffled.indexOf(correctText);
  ctx.session.lock = false;

  const buttons = shuffled.map((opt, i) => [
    Markup.button.callback(opt, `answer:${i}`),
  ]);
  return ctx.reply(
    `–í–æ–ø—Ä–æ—Å ${step + 1} –∏–∑ ${total}\n\n${q}`,
    Markup.inlineKeyboard(buttons)
  );
}

async function finish(ctx) {
  const lines = [
    `–ê–Ω–≥–µ–ª–∏–Ω–∞, —Å –î–Ω—ë–º —É—á–∏—Ç–µ–ª—è!`,
    `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–æ, —á—Ç–æ —É—á–∏—à—å –≤–∏–¥–µ—Ç—å —Å–º—ã—Å–ª –º–µ–∂–¥—É —Å—Ç—Ä–æ–∫, –ª—é–±–∏—Ç—å –∫–Ω–∏–≥–∏ –∏ —Å–ø–æ—Ä–∏—Ç—å –∫—É–ª—å—Ç—É—Ä–Ω–æ ‚Äî –¥–∞–∂–µ —Å —Å–µ—Ä–∏–∞–ª–∞–º–∏ üôÇ`,
    `–ö–∞–∫ –ø–∏—Å–∞–ª –ú–∞—è–∫–æ–≤—Å–∫–∏–π: ¬´–ï—Å–ª–∏ –∑–≤—ë–∑–¥—ã –∑–∞–∂–∏–≥–∞—é—Ç ‚Äî –∑–Ω–∞—á–∏—Ç ‚Äî —ç—Ç–æ –∫–æ–º—É-–Ω–∏–±—É–¥—å –Ω—É–∂–Ω–æ¬ª.`,
    `–ü—É—Å—Ç—å —É—Ä–æ–∫–∏ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—Ç –∏ –Ω–∞ –Ω–∏—Ö –∑–∞–≥–æ—Ä–∞—é—Ç—Å—è –≥–ª–∞–∑–∞, –∞ ${CAT_NAME} –º—É—Ä–ª—ã—á–µ—Ç —Ä—è–¥–æ–º –∏ –µ—Å—Ç —Å —Ç–æ–±–æ–π –º–æ—Ä–æ–∂–µ–Ω–æ–µ))`,
    `–¢–µ–ø–ª–∞, –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è –∏ —Å—á–∞—Å—Ç–ª–∏–≤—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤!`,
    getToast(),
  ].join("\n");

  await ctx.reply(
    lines,
    Markup.inlineKeyboard([
      [Markup.button.callback("–ü–æ–∫–∞–∑–∞—Ç—å —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã", "certs")],
      [Markup.button.callback("–°—Ç–∞—Ä—Ç", "start")],
      [Markup.button.callback("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ", "again")],
      [Markup.button.callback("–ú–µ–Ω—é", "menu")],
    ])
  );

  // –°–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è
  ctx.session.step = 0;
  ctx.session.quiz = null;
  ctx.session.currentOptions = null;
  ctx.session.correctIndex = null;
  ctx.session.lock = false;
}

// ===== –°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã =====

// 1) –§–æ—Ç–æ-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–æ–≤–Ω–æ —Ç—É –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ ./assets
async function sendPhotoCertificate(ctx) {
  const candidates = ["certificate.jpg", "certificate.jpeg", "certificate.png"];
  const found = candidates
    .map((name) => path.join(__dirname, "assets", name))
    .find((p) => fs.existsSync(p));
  if (!found) {
    await ctx.reply(
      "–§–æ—Ç–æ-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω (–ø–æ–ª–æ–∂–∏ —Ñ–∞–π–ª –≤ ./assets/certificate.jpg)."
    );
    return;
  }
  await ctx.replyWithPhoto(
    { source: found },
    { caption: "–ü–æ–¥–∞—Ä–æ—á–Ω—ã–π —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç üéÅ" }
  );
}

// 2) PDF-—Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç: –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∞ ‚Äî –¥–µ–ª–∞–µ–º –∏–∑ –Ω–µ—ë –ø–æ–ª–Ω—ã–π –ª–∏—Å—Ç A4; –∏–Ω–∞—á–µ ‚Äî —Ç–µ–∫—Å—Ç–æ–≤—ã–π PDF
async function sendPdfCertificate(ctx) {
  const imgPath = ["certificate.jpg", "certificate.jpeg", "certificate.png"]
    .map((n) => path.join(__dirname, "assets", n))
    .find((p) => fs.existsSync(p));

  const outPath = path.join(__dirname, "certificate.pdf");

  await new Promise((resolve, reject) => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ ‚Äî –¥–µ–ª–∞–µ–º PDF-—Å—Ç—Ä–∞–Ω–∏—Ü—É —Å –Ω–∏–º —Ü–µ–ª–∏–∫–æ–º.
    if (imgPath) {
      const doc = new PDFDocument({ size: "A4", margin: 0 });
      const stream = fs.createWriteStream(outPath);
      doc.pipe(stream);
      const pageW = doc.page.width;
      const pageH = doc.page.height;
      doc.image(imgPath, 0, 0, { fit: [pageW, pageH] });

      // –ù–µ–±–æ–ª—å—à–∞—è –ø–æ–¥–ø–∏—Å—å –≤–Ω–∏–∑—É (–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å)
      const today = new Date().toLocaleDateString("ru-RU");
      doc
        .fillColor("#4b2b4f")
        .fontSize(10)
        .text(`–î–ª—è: ${TEACHER_NAME} ¬∑ –î–∞—Ç–∞: ${today}`, 20, pageH - 30);

      doc.end();
      stream.on("finish", resolve);
      stream.on("error", reject);
      return;
    }

    // –§–æ–ª–±—ç–∫: –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π PDF
    const doc = new PDFDocument({ size: "A4", margin: 50 });
    const stream = fs.createWriteStream(outPath);
    doc.pipe(stream);
    doc.fontSize(28).text("–°–ï–†–¢–ò–§–ò–ö–ê–¢ –ü–†–ò–ó–ù–ê–¢–ï–õ–¨–ù–û–°–¢–ò", { align: "center" });
    doc.moveDown(1);
    doc.fontSize(14).text(`–í—Ä—É—á–∞–µ—Ç—Å—è ${TEACHER_NAME}`, { align: "center" });
    doc.moveDown(0.5);
    doc.text(
      `–ó–∞ –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ –Ω–∞ —É—Ä–æ–∫–∞—Ö —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –∏ –ª–∏—Ç–µ—Ä–∞—Ç—É—Ä—ã, ` +
        `–∑–∞ –ª—é–±–æ–≤—å –∫ —á—Ç–µ–Ω–∏—é –∏ —É–º–µ–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–∞—Ä–∏–≤–∞—Ç—å —Å —ç–ø–æ—Ö–æ–π —á–µ—Ä–µ–∑ —Å–µ—Ä–∏–∞–ª—ã.`,
      { align: "center" }
    );
    doc.moveDown(1);
    doc.text(
      `–ü—É—Å—Ç—å –∫–æ—Ç –ø–æ –∏–º–µ–Ω–∏ ¬´${CAT_NAME}¬ª –≤—Å–µ–≥–¥–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç –∞—Ç–º–æ—Å—Ñ–µ—Ä—É —É—é—Ç–∞ –∏ —Ç–µ–ø–ª–∞.`,
      { align: "center", oblique: true }
    );
    doc.moveDown(2);
    const today = new Date().toLocaleDateString("ru-RU");
    doc.text(`–î–∞—Ç–∞: ${today}`, { align: "right" });
    doc.moveDown(1);
    doc.text("–ü–æ–¥–ø–∏—Å—å: ____________________", { align: "right" });
    doc.end();
    stream.on("finish", resolve);
    stream.on("error", reject);
  });

  await ctx.replyWithDocument(
    { source: outPath, filename: "certificate.pdf" },
    { caption: "–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç (PDF)" }
  );
}

// –ö–æ–º–ø–ª–µ–∫—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–≤—É—Ö —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç–æ–≤
async function sendCertificates(ctx) {
  await sendPhotoCertificate(ctx); // –ø—Ä–∏—à–ª—ë–º –∫–∞—Ä—Ç–∏–Ω–∫—É
  await sendPdfCertificate(ctx); // –∏ PDF-–≤–µ—Ä—Å–∏—é
}

// ===== –ö–æ–º–∞–Ω–¥—ã –∏ –¥–µ–π—Å—Ç–≤–∏—è =====
bot.start(async (ctx) => {
  ctx.session.step = 0;
  ctx.session.quiz = getQuestions();
  await showWelcome(ctx);
});

bot.command("menu", async (ctx) => {
  await showMenu(ctx);
});

bot.command("restart", async (ctx) => {
  ctx.session.step = 0;
  ctx.session.quiz = getQuestions();
  await ctx.reply("–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ!");
  await sendQuestion(ctx);
});

bot.action("menu", async (ctx) => {
  await ctx.answerCbQuery();
  await showMenu(ctx);
});

bot.action("start", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.session.step = 0;
  ctx.session.quiz = getQuestions();
  await sendQuestion(ctx);
});

bot.action("again", async (ctx) => {
  await ctx.answerCbQuery();
  ctx.session.step = 0;
  ctx.session.quiz = getQuestions();
  await showWelcome(ctx);
});

bot.action("certs", async (ctx) => {
  await ctx.answerCbQuery();
  await sendCertificates(ctx);
});

// –û—Ç–≤–µ—Ç –Ω–∞ –≤–∞—Ä–∏–∞–Ω—Ç—ã
bot.action(/^answer:(\d+)$/, async (ctx) => {
  await ctx.answerCbQuery();
  if (ctx.session.lock) return;
  ctx.session.lock = true;

  const chosen = Number(ctx.match[1]);
  const step = ctx.session.step ?? 0;
  const correctIndex = ctx.session.correctIndex;

  try {
    await ctx.editMessageReplyMarkup();
  } catch (_) {}

  // all-correct –≤–æ–ø—Ä–æ—Å
  if (correctIndex === -1) {
    await ctx.reply("–û—Ç–ª–∏—á–Ω—ã–π –≤—ã–±–æ—Ä! ‚úÖ");
  } else if (chosen === correctIndex) {
    // —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –ø—Ä–æ –∫–æ—Ç–∞ ‚Äî ¬´–≤–µ—Ä–Ω–æ¬ª
    await ctx.reply("–¢–æ—á–Ω–æ! üêæ");
  } else {
    const rightText = (ctx.session.currentOptions || [])[correctIndex] ?? "‚Äî";
    await ctx.reply(`–ü–æ—á—Ç–∏! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: ${rightText}`);
  }

  ctx.session.step = step + 1;
  await sendQuestion(ctx);
});

bot.catch((err, ctx) => {
  console.error("Bot error:", err);
  try {
    ctx.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.");
  } catch (_) {}
});

const express = require("express");
const PORT = process.env.PORT || 3000;
const WEBHOOK_URL = (process.env.WEBHOOK_URL || "").replace(/\/$/, "");
const HOOK_PATH =
  "/telegram/" + Buffer.from(BOT_TOKEN).toString("hex").slice(0, 12);

(async () => {
  if (WEBHOOK_URL) {
    const app = express();
    app.use(express.json());
    app.post(HOOK_PATH, (req, res) => bot.webhookCallback(HOOK_PATH)(req, res));
    app.get("/", (_, res) => res.send("OK"));
    await bot.telegram.setWebhook(WEBHOOK_URL + HOOK_PATH);
    app.listen(PORT, () =>
      console.log(`Webhook mode: ${WEBHOOK_URL}${HOOK_PATH}`)
    );
  } else {
    await bot.launch();
    console.log("Polling mode: bot launched.");
  }
})();

// –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
